// media queries https://www.sitepoint.com/sass-mixin-media-merging/
@mixin media($queries) {
  @if length($queries) == 0 {
    @content;
  }

  @else {
    $first-key: nth(map-keys($queries), 1);

    @media ($first-key: map-get($queries, $first-key)) {
      $queries: map-remove($queries, $first-key);

      @include media($queries) {
        @content;
      }
    }
  }
}

@mixin respond-to($breakpoint) {
  $media: map-get($breakpoints, $breakpoint);

  @if not $media {
    @error "No query could be retrieved from `#{$breakpoint}`. " + "Please make sure it is defined in `$breakpoints` map.";
  }

  @media #{$media} {
    @content;
  }
}

/*
Миксин для элементов, которые должны сохранять определенное соотношение сторон (напр., блок с видео)
Пример использования:
div {
  @include ratio(16,9);
} */
@mixin ratio($x,$y, $pseudo: false) {
  $padding: unquote(($y/$x) *100+'%');

  @if $pseudo {

    &::before {
      @include pseudo($pos: relative);

      width: 100%;
      padding-top: $padding;
    }
  }

  @else { padding-top: $padding; }
}

/*
Миксин для базовых параметров псевдоэлементов.
Пример использования:

div::after {
  @include pseudo;
  top: 10px;
  left: 10px;
  width: 150px;
}
*/
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

/*
Миксин для треугольников, сделанных через :before и :after
Пример:

div::after {
  @include triangle(black, top, 10px);
}
*/
@mixin triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);

  width: 0;
  height: 0;

  @if $round {
    border-radius: 3px;
  }

  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  }

  @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  }

  @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  }

  @else if  $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}

/*
Миксин для медиа-запросов
Пример использования:
div {
  @include screen('phone') {
    // Правила для разрешений выше 'phone'
  }

  @include screen('phone', max) {
    // Правила для разрешений ниже 'phone'
  }
}
*/
$breakpoints: (
  'phone': 400px,
  'phone-wide': 480px,
  'phablet': 560px,
  'tablet-small': 640px,
  'tablet': 768px,
  'tablet-wide': 1024px,
  'desktop': 1248px,
  'desktop-wide': 1440px
);

@mixin screen($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);

    @if $type == max {
      $width: $width - 1px;
    }

    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

/*
Быстренько подрубаем аппаратное ускорение для анимирующихся элементов.
Пример использования:
div {
  @include performance;
}
*/
@mixin performance($backface: true, $perspective: 1000) {
  @if $backface {
    backface-visibility: hidden;
  }

  perspective: $perspective;
}

/*
Миксин для обрезания длинной строки троеточием.
Пример использования:
p {
  @include ellipsis(100%);
}
*/
@mixin ellipsis($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/*
Миксин для быстрого добавления clearfix.
Пример использования:
.parent {
  @include clearfix;
}
*/
@mixin clearfix {

  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/*
Миксин для того, чтоб скрыть элемент, но при этом он все равно рендерился
и был доступен в DOM.
Пример использования:
div {
  @include visual-hide;
}
*/
@mixin visual-hide() {
  margin: 0;
  padding: 0;
  width: 0;
  height: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
}

/*
Миксин для быстрого выравнивания блока по центру
Пример использования:
div {
  @include center-block;
}
*/
@mixin center-block {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/*
Миксин для изображений.
Нужен, чтобы картинка заполняла другой блок подобно background-size: cover
Пример использования:
div {
  @include fill-img;
}
*/
@mixin fill-img {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
  object-fit: cover;
  width: 0;
  min-width: 100%;
  min-height: 100%;
}

// @qluqua
// Sergei Kornienko mixins, used in page "depfin_services_budget_calc"
// and in "budget-calc-app"
@mixin debug {
  background-color: rgba(red, .3);
}

@mixin outline {
  outline: solid 3px rgba(red, .3);
}

// vendor prefixes
@mixin vendor($property, $value) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  #{$property}: $value;
}

// Box sizing border-box
@mixin border-box {
  @include vendor(box-sizing, border-box);
}

// general transition options
@mixin transited($args: 'all 250ms ease-in-out') {
  @include vendor(transition, unquote(inspect($args)));
}

// transform vendor prefixes mixin
@mixin transform($args) {
  @include vendor(transform, $args);
}

// background cover
@mixin bg-cover {
  @include vendor(background-size, cover);
  background-repeat: no-repeat;
  background-position: center center;
  background-color: transparent;
}

// linear gradient mixin
@mixin gradient($args) {
  @include vendor(background, linear-gradient(unquote($args)));
  @include vendor(zoom, 1);
}

@mixin img-responsive {
  display: block;
  max-width: 100%;
  height: auto;
}

// placeholder text color
@mixin placeholder-color($color) {
  ::-webkit-input-placeholder { color: $color; }
  :-moz-placeholder { color: $color; }
  ::-moz-placeholder { color: $color; opacity: 1; }
  :-ms-input-placeholder { color: $color; }
}

// overlay mixin
@mixin ghost {
  content: '';
  position: absolute;
  z-index: -1;
  display: block;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: auto !important;
  height: auto !important;
}

// flexbox
@mixin display-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex($columns: initial) {                    // The 'flex' shorthand
  @include vendor(flex, $columns);                // applies to: flex items
}                                                   // <positive-number>, initial, auto, or none

@mixin flex-direction($direction: row) {            // Flex Flow Direction
  @include vendor(flex-direction, $direction);    // applies to: flex containers
}                                                   // row | row-reverse | column | column-reverse

@mixin flex-wrap($wrap: no-wrap) {                  // Flex Line Wrapping
  @include vendor(flex-wrap, $wrap);              // applies to: flex containers
}                                                   // no-wrap | wrap | wrap-reverse

@mixin flex-flow($flow) {                           // Flex Direction and Wrap
  @include vendor(flex-flow, $flow);              // applies to: flex containers
}                                                   // <flex-direction> || <flex-wrap>

@mixin flex-order($order: 0) {                      // Display Order
  @include vendor(flex-order, $order);            // applies to: flex items
}                                                   // <integer>

@mixin flex-grow($grow: 0) {                        // Flex grow factor
  @include vendor(flex-grow, $grow);              // applies to: flex items
}                                                   // <number>

@mixin flex-shrink($shrink: 1) {                    // Flex shrink
  @include vendor(flex-shrink, $shrink);          // applies to: flex item shrink factor
}                                                   // <number>

@mixin flex-basis($width: auto) {                   // Flex basis - the initial main size of the flex item
  @include vendor(flex-basis, $width);            // applies to: flex items
}                                                   // <width>

@mixin justify-content($justify: flex-start) {      // Axis Alignment
  @include vendor(justify-content, $justify);     // applies to: flex containers
}                                                   // flex-start | flex-end | center | space-between | space-around

@mixin align-content($align: stretch) {             // Packing Flex Lines
  @include vendor(align-content, $align);         // applies to: multi-line flex containers
}                                                   // flex-start | flex-end | center | space-between | space-around | stretch

@mixin align-items($align: stretch) {               // Cross-axis Alignment
  @include vendor(align-items, $align);           // applies to: flex containers
}                                                   // flex-start | flex-end | center | baseline | stretch

@mixin align-self($align: auto) {                   // Cross-axis Alignment
  @include vendor(align-self, $align);            // applies to: flex items
}                                                   // auto | flex-start | flex-end | center | baseline | stretch


// распределение блоков по всей ширине
@mixin block-justify {
  text-align: justify;
  &:after {
    content: '';
    display: inline-block;
    width: 100%;
    height: 0.00000000001px;
  }
}